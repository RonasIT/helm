replicaCount: 1

image:
  repository: nginx
  pullPolicy: IfNotPresent
  # -- Overrides the image tag whose default is the chart appVersion.
  tag: ''

imagePullSecrets: []

nameOverride: ''
fullnameOverride: ''

nodeSelector:
  default-node-pool: 'true'

extraEnvVars: []

serviceAccount:
  # -- Specifies whether a service account should be created
  create: true
  # -- Annotations to add to the service account
  annotations: {}
  # -- The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ''

podAnnotations: {}

podSecurityContext: {}

livenessProbe:
  enabled: true
  path: /status
  port: http

readinessProbe:
  enabled: true
  path: /status
  port: http

volumes:
  - name: gcs
    secret:
      secretName: gcs-key
      optional: true
  - name: logs
    emptyDir: {}

volumeMounts:
  - name: gcs
    mountPath: '/mnt/gcs'
    readOnly: true
  - name: logs
    mountPath: '/app/storage/logs'

securityContext: {}
# capabilities:
#   drop:
#   - ALL
# readOnlyRootFilesystem: true
# runAsNonRoot: true
# runAsUser: 1000

service:
  type: ClusterIP
  port: 80
  annotations: {}

ingress:
  enabled: true
  className: ''
  annotations:
    kubernetes.io/ingress.class: nginx
    ingress.kubernetes.io/rewrite-target: /
    cert-manager.io/cluster-issuer: cert-manager
    certmanager.k8s.io/cluster-issuer: cert-manager
    nginx.ingress.kubernetes.io/server-snippet: >
      add_header X-Robots-Tag "noindex, nofollow";
  hosts:
    - host: api.ronas.cloud
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls:
    - secretName: api.ronas.cloud-tls
      hosts:
        - api.ronas.cloud

resourcesPreset: nano

logger:
  enabled: true
  resourcesPreset: nano

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 3
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

tolerations: []

affinity: {}

postgresql:
  enabled: true
  image:
    tag: 17.4
  auth:
    database: 'pgdb'
    username: 'pguser'
    existingSecret: 'postgresql-credentials'
  primary:
    persistence:
      size: 1Gi
    resourcesPreset: nano
    nodeSelector:
      default-node-pool: 'true'

mysql:
  enabled: false
  auth:
    database: 'mydb'
    username: 'myuser'
    existingSecret: 'mysql-credentials'
  primary:
    persistence:
      size: 1Gi
    resourcesPreset: nano
    nodeSelector:
      default-node-pool: 'true'

redis:
  enabled: true
  image:
    tag: 7.1
  auth:
    existingSecret: 'redis-credentials'
    existingSecretPasswordKey: 'password'
  architecture: 'standalone'
  master:
    persistence:
      size: 1Gi
    resourcesPreset: nano
    nodeSelector:
      default-node-pool: 'true'

cronjobs:
  enabled: true
  schedulers:
    - name: default
      cmd: 'php artisan schedule:run || true'
  schedule: '*/1 * * * *'
  concurrencyPolicy: 'Forbid'
  startingDeadlineSeconds: 200
  successfulJobsHistoryLimit: 1
  restartPolicy: 'Never'
  resourcesPreset: nano

migration:
  enabled: true
  annotations:
    'helm.sh/hook': post-install,pre-upgrade
    'helm.sh/hook-delete-policy': before-hook-creation
  activeDeadlineSeconds: 180
  backoffLimit: 1
  cmd: '/mnt/scripts/migration.sh'
  resourcesPreset: nano

workers:
  enabled: true
  # -- Global workers autoscaling settings (can be overwritten in items)
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 60
  # -- Global workers resources (can be overwritten in items)
  resourcesPreset: nano
  items: []
  # - name: default
  #   replicaCount: 1
  #   cmd: 'php /app/artisan queue:work --sleep=3 --tries=3 --backoff=3 --queue=default --memory=128'
  #   autoscaling:
  #     enabled: false
  #     minReplicas: 1
  #     maxReplicas: 3
  #     targetCPUUtilizationPercentage: 60
  #   resourcesPreset: nano
